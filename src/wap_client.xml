<class
    name = "wap_client"
    title = "Wallet Client API"
    script = "zproto_client_c"
    protocol_class = "wap_proto"
    package_dir = "../include"
    project_header = "wap_classes.h"
    export_macro = "WAP_EXPORT"
    >
    This is a client implementation of the Wallet Access Protocol
    <include filename = "../license.xml" />

    <state name = "start">
        <event name = "connect" next = "expect open ok">
            <action name = "connect to server endpoint" />
            <action name = "set client identity" />
            <action name = "use connect timeout" />
            <action name = "send" message = "OPEN" />
        </event>
        <event name = "bad endpoint">
            <action name = "signal bad endpoint" />
            <action name = "terminate" />
        </event>
    </state>

    <state name = "expect open ok" inherit = "defaults">
        <event name = "OPEN OK" next = "connected">
            <action name = "signal success" />
            <action name = "client is connected" />
        </event>
        <event name = "expired">
            <action name = "signal server not present" />
            <action name = "terminate" />
        </event>
    </state>
    
    <state name = "connected" inherit = "defaults">
        <event name = "blocks" next = "expect blocks ok">
            <action name = "prepare blocks command" />
            <action name = "send" message = "BLOCKS" />
        </event>
        <event name = "get tx" next = "expect get tx ok">
            <action name = "prepare get tx command" />
            <action name = "send" message = "GET-TX" />
        </event>
        <event name = "send raw transaction" next = "expect send raw transaction ok">
            <action name = "prepare send raw transaction command" />
            <action name = "send" message = "SEND RAW TRANSACTION" />
        </event>
        <event name = "save bc" next = "expect save bc ok">
            <action name = "send" message = "SAVE BC" />
        </event>
        <event name = "start mining" next = "expect start mining ok">
            <action name = "prepare start mining command" />
            <action name = "send" message = "START MINING" />
        </event>
        <event name = "stop mining" next = "expect stop mining ok">
            <action name = "send" message = "STOP MINING" />
        </event>
        <event name = "output indexes" next = "expect output indexes ok">
            <action name = "prepare get output indexes command" />
            <action name = "send" message = "OUTPUT INDEXES" />
        </event>
        <event name = "random outs" next = "expect random outs ok">
            <action name = "prepare get random outs command" />
            <action name = "send" message = "RANDOM OUTS" />
        </event>
        <event name = "get height" next = "expect get height ok">
            <action name = "send" message = "GET HEIGHT" />
        </event>
        <event name = "get info" next = "expect get info ok">
            <action name = "send" message = "GET INFO" />
        </event>
        <event name = "get peer list" next = "expect get peer list ok">
            <action name = "send" message = "GET PEER LIST" />
        </event>
        <event name = "get mining status" next = "expect get mining status ok">
            <action name = "send" message = "GET MINING STATUS" />
        </event>
        <event name = "set log hash rate" next = "expect set log hash rate ok">
        		<action name = "prepare set log hash rate command" />
            <action name = "send" message = "SET LOG HASH RATE" />
        </event>
        <event name = "set log level" next = "expect set log level ok">
        		<action name = "prepare set log level command" />
            <action name = "send" message = "SET LOG LEVEL" />
        </event>
        <event name = "start save graph" next = "expect start save graph ok">
            <action name = "send" message = "START SAVE GRAPH" />
        </event>
        <event name = "stop save graph" next = "expect stop save graph ok">
            <action name = "send" message = "STOP SAVE GRAPH" />
        </event>
        <event name = "get block hash" next = "expect get block hash ok">
        		<action name = "prepare get block hash command" />
            <action name = "send" message = "GET BLOCK HASH" />
        </event>
        <event name = "get block template" next = "expect get block template ok">
        		<action name = "prepare get block template command" />
            <action name = "send" message = "GET BLOCK TEMPLATE" />
        </event>
        <event name = "get hard fork info" next = "expect get hard fork info ok">
            <action name = "prepare hard fork info command" />
            <action name = "send" message = "GET HARD FORK INFO" />
        </event>
        <event name = "get connections list" next = "expect get connections list ok">
            <action name = "send" message = "GET CONNECTIONS LIST" />
        </event>
        <event name = "stop daemon" next = "expect stop daemon ok">
            <action name = "prepare stop daemon command" />
            <action name = "send" message = "STOP DAEMON" />
        </event>
        <event name = "get block by height" next = "expect get block by height ok">
            <action name = "prepare get block by height command" />
            <action name = "send" message = "GET BLOCK BY HEIGHT" />
        </event>
        <event name = "get block by hash" next = "expect get block by hash ok">
            <action name = "prepare get block by hash command" />
            <action name = "send" message = "GET BLOCK BY HASH" />
        </event>
        <event name = "get key image status" next = "expect get key image status ok">
            <action name = "prepare get key image status command" />
            <action name = "send" message = "GET KEY IMAGE STATUS" />
        </event>
        <event name = "get tx pool" next = "expect get tx pool ok">
            <action name = "send" message = "GET TX POOL" />
        </event>
        <event name = "set out peers" next = "expect set out peers ok">
            <action name = "prepare set out peers command" />
            <action name = "send" message = "SET OUT PEERS" />
        </event>
        <event name = "destructor" next = "expect close ok">
            <action name = "send" message = "CLOSE" />
        </event>
        <event name = "expired">
            <action name = "check if connection is dead" />
            <action name = "send" message = "PING" />
        </event>
    </state>

    <state name = "expect blocks ok" inherit = "defaults">
        <event name = "BLOCKS OK" next = "connected">
            <action name = "signal have blocks ok" />
        </event>
    </state>

    <state name = "expect get tx ok" inherit = "defaults">
        <event name = "GET TX OK" next = "connected">
            <action name = "signal have get tx ok" />
        </event>
    </state>

    <state name = "expect send raw transaction ok" inherit = "defaults">
        <event name = "SEND RAW TRANSACTION OK" next = "connected">
            <action name = "signal have send raw transaction ok" />
        </event>
    </state>

    <state name = "expect save bc ok" inherit = "defaults">
        <event name = "SAVE BC OK" next = "connected">
            <action name = "signal have save bc ok" />
        </event>
    </state>

    <state name = "expect start mining ok" inherit = "defaults">
        <event name = "START MINING OK" next = "connected">
            <action name = "signal have start mining ok" />
        </event>
    </state>

    <state name = "expect stop mining ok" inherit = "defaults">
        <event name = "STOP MINING OK" next = "connected">
            <action name = "signal have stop mining ok" />
        </event>
    </state>
    
    <state name = "expect output indexes ok" inherit = "defaults">
        <event name = "OUTPUT INDEXES OK" next = "connected">
            <action name = "signal have output indexes ok" />
        </event>
    </state>
    
    <state name = "expect random outs ok" inherit = "defaults">
        <event name = "RANDOM OUTS OK" next = "connected">
            <action name = "signal have random outs ok" />
        </event>
    </state>
    
    <state name = "expect get height ok" inherit = "defaults">
        <event name = "GET HEIGHT OK" next = "connected">
            <action name = "signal have get height ok" />
        </event>
    </state>
    
    <state name = "expect get info ok" inherit = "defaults">
        <event name = "GET INFO OK" next = "connected">
            <action name = "signal have get info ok" />
        </event>
    </state>

		<state name = "expect get peer list ok" inherit = "defaults">
        <event name = "GET PEER LIST OK" next = "connected">
            <action name = "signal have get peer list ok" />
        </event>
    </state>
    
    <state name = "expect get mining status ok" inherit = "defaults">
        <event name = "GET MINING STATUS OK" next = "connected">
            <action name = "signal have get mining status ok" />
        </event>
    </state>
    
    <state name = "expect set log hash rate ok" inherit = "defaults">
        <event name = "SET LOG HASH RATE OK" next = "connected">
            <action name = "signal have set log hash rate ok" />
        </event>
    </state>

		<state name = "expect set log level ok" inherit = "defaults">
        <event name = "SET LOG LEVEL OK" next = "connected">
            <action name = "signal have set log level ok" />
        </event>
    </state>
    
    <state name = "expect start save graph ok" inherit = "defaults">
        <event name = "START SAVE GRAPH OK" next = "connected">
            <action name = "signal have start save graph ok" />
        </event>
    </state>

    <state name = "expect stop save graph ok" inherit = "defaults">
        <event name = "STOP SAVE GRAPH OK" next = "connected">
            <action name = "signal have stop save graph ok" />
        </event>
    </state>
    
    <state name = "expect get block hash ok" inherit = "defaults">
        <event name = "GET BLOCK HASH OK" next = "connected">
            <action name = "signal have get block hash ok" />
        </event>
    </state>

		<state name = "expect get block template ok" inherit = "defaults">
        <event name = "GET BLOCK TEMPLATE OK" next = "connected">
            <action name = "signal have get block template ok" />
        </event>
    </state>
    
    <state name = "expect get hard fork info ok" inherit = "defaults">
        <event name = "GET HARD FORK INFO OK" next = "connected">
            <action name = "signal have get hard fork info ok" />
        </event>
    </state>

    <state name = "expect get connections list ok" inherit = "defaults">
        <event name = "GET CONNECTIONS LIST OK" next = "connected">
            <action name = "signal have get connections list ok" />
        </event>
    </state>
    
    <state name = "expect stop daemon ok" inherit = "defaults">
        <event name = "STOP DAEMON OK" next = "connected">
            <action name = "signal have stop daemon ok" />
        </event>
    </state>
    
    <state name = "expect get block by height ok" inherit = "defaults">
        <event name = "GET BLOCK BY HEIGHT OK" next = "connected">
            <action name = "signal have get block by height ok" />
        </event>
    </state>
    
    <state name = "expect get block by hash ok" inherit = "defaults">
        <event name = "GET BLOCK BY HASH OK" next = "connected">
            <action name = "signal have get block by hash ok" />
        </event>
    </state>
    
    <state name = "expect get key image status ok" inherit = "defaults">
        <event name = "GET KEY IMAGE STATUS OK" next = "connected">
            <action name = "signal have get key image status ok" />
        </event>
    </state>

    <state name = "expect get tx pool ok" inherit = "defaults">
        <event name = "GET TX POOL OK" next = "connected">
            <action name = "signal have get tx pool ok" />
        </event>
    </state>

    <state name = "expect set out peers ok" inherit = "defaults">
        <event name = "SET OUT PEERS OK" next = "connected">
            <action name = "signal have set out peers ok" />
        </event>
    </state>
    
    <state name = "expect close ok" inherit = "defaults">
        <event name = "CLOSE OK">
            <action name = "signal success" />
            <action name = "terminate" />
        </event>
        <event name = "expired">
            <action name = "signal failure" />
            <action name = "terminate" />
        </event>
    </state>

    <state name = "defaults">
        <event name = "PING OK">
            <action name = "client is connected" />
        </event>
        <event name = "ERROR" next = "have error">
            <action name = "check status code" />
        </event>
        <event name = "exception">
            <!-- Generic exception event to interrupt actions -->
        </event>
        <event name = "*">
            <!-- Discard any other incoming events -->
        </event>
    </state>

    <state name = "have error">
        <event name = "command invalid" next = "reexpect open ok">
            <action name = "use connect timeout" />
            <action name = "send" message = "OPEN" />
        </event>
        <event name = "other">
            <action name = "signal unhandled error" />
            <action name = "terminate" />
        </event>
    </state>
   
    <state name = "reexpect open ok" inherit = "defaults">
        <event name = "OPEN OK" next = "connected">
            <action name = "client is connected" />
        </event>
    </state>

    <!-- API methods -->
    <method name = "connect" return = "status">
    Connect to server endpoint, with specified timeout in msecs (zero means
    wait forever). Constructor succeeds if connection is successful. The caller
    may specify its address.
        <field name = "endpoint" type = "string" />
        <field name = "timeout" type = "number" size = "4" />
        <field name = "identity" type = "string" />
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "SUCCESS">
        <field name = "status" type = "integer" />
    </reply>

    <reply name = "FAILURE">
        <field name = "status" type = "integer" />
        <field name = "reason" type = "string" />
    </reply>

    <method name = "destructor" return = "status">
    Disconnect from server. Waits for a short timeout for confirmation from
    the server, then disconnects anyhow.
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>
    
    <method name = "blocks" return = "status">
    Request a set of blocks from the server.
        <field name = "block ids" type = "strings" />
        <field name = "start height" type = "number" size = "8" />
        <accept reply = "BLOCKS OK" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "BLOCKS OK">
        <field name = "status" type = "number" size = "4" />
        <field name = "start height" type = "number" size = "8" />
        <field name = "curr height" type = "number" size = "8" />
        <field name = "msg data" type = "msg" />
    </reply>
    
    <method name = "send raw transaction" return = "status">
    Send a raw transaction to the daemon.
        <field name = "tx as hex" type = "chunk" />
        <accept reply = "SEND RAW TRANSACTION OK" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "SEND RAW TRANSACTION OK">
        <field name = "status" type = "number" size = "4" />
    </reply>

    <method name = "get tx" return = "status">
    Request a set of transactions from the server.
        <field name = "tx id" type = "chunk" />
        <field name = "as-json" type = "number" size = "1" />
        <accept reply = "GET TX OK" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "GET TX OK">
        <field name = "status" type = "number" size = "4" />
        <field name = "tx data" type = "chunk" />
        <field name = "in pool" type = "number" size = "1" />
    </reply>

    <method name = "save bc" return = "status">
    Request a set of blocks from the server.
        <accept reply = "SAVE BC OK" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "SAVE BC OK">
        <field name = "status" type = "number" size = "4" />
    </reply>

		<method name = "output indexes" return = "status">
        Ask for tx output indexes.
        <field name = "tx id" type = "chunk" >Transaction ID</field>
        <accept reply = "OUTPUT INDEXES OK" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "OUTPUT INDEXES OK">
        <field name = "status" type = "number" size = "4" >Status</field>
        <field name = "o indexes" type = "frame" >Output Indexes</field>
    </reply>
    
    <method name = "random outs" return = "status">
        Ask for tx output indexes.
        <field name = "outs count" type = "number" size = "8" >Outs count</field>
        <field name = "amounts" type = "frame" >Amounts</field>
        <accept reply = "RANDOM OUTS OK" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "RANDOM OUTS OK">
        <field name = "status" type = "number" size = "4" >Status</field>
        <field name = "random outputs" type = "frame" >Outputs</field>
    </reply>
    
    <method name = "get height" return = "status">
        Ask for height.
        <accept reply = "GET HEIGHT OK" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "GET HEIGHT OK">
        <field name = "status" type = "number" size = "4" >Status</field>
        <field name = "height" type = "number" size = "8" >Height</field>
    </reply>
    
    <method name = "get info" return = "status">
        Ask for height.
        <accept reply = "GET INFO OK" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "GET INFO OK">
        <field name = "status" type = "number" size = "4" >Status</field>
        <field name = "height" type = "number" size = "8" >Height</field>
        <field name = "target_height" type = "number" size = "8" >Target Height</field>
        <field name = "difficulty" type = "number" size = "8" >Difficulty</field>
        <field name = "tx_count" type = "number" size = "8" >TX Count</field>
        <field name = "tx_pool_size" type = "number" size = "8" >TX Pool Size</field>
        <field name = "alt_blocks_count" type = "number" size = "8" >Alt Blocks Count</field>
        <field name = "outgoing_connections_count" type = "number" size = "8" >Outgoing Connections Count</field>
        <field name = "incoming_connections_count" type = "number" size = "8" >Incoming Connections Count</field>
        <field name = "white_peerlist_size" type = "number" size = "8" >White Peerlist Size</field>
        <field name = "grey_peerlist_size" type = "number" size = "8" >Grey Peerlist Size</field>
        <field name = "testnet" type = "number" size = "1" >Testnet</field>
    </reply>

    <method name = "start mining" return = "status">
    Send start mining command to server.
        <field name = "address" type = "chunk" />
        <field name = "thread count" type = "number" size = "8" />
        <accept reply = "START MINING OK" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "START MINING OK">
        <field name = "status" type = "number" size = "4" />
    </reply>

    <method name = "stop mining" return = "status">
    Send stop mining command to server.
        <accept reply = "STOP MINING OK" />
        <accept reply = "FAILURE" />
    </method>
    
    <reply name = "STOP MINING OK">
        <field name = "status" type = "number" size = "4" />
    </reply>
    
    <method name = "get peer list" return = "status">
    		Get peer list
        <accept reply = "GET PEER LIST OK" />
        <accept reply = "FAILURE" />
    </method>
    
    <reply name = "GET PEER LIST OK">
        <field name = "status" type = "number" size = "4" />
        <field name = "white_list" type = "frame" >White list</field>
        <field name = "gray_list" type = "frame" >Gray list</field>
    </reply>
    
    <method name = "get mining status" return = "status">
    		Get mining status
        <accept reply = "GET MINING STATUS OK" />
        <accept reply = "FAILURE" />
    </method>
    
    <reply name = "GET MINING STATUS OK">
        <field name = "status" type = "number" size = "4" >Status</field>
        <field name = "active" type = "number" size = "1" >Active</field>
        <field name = "speed" type = "number" size = "8" >Speed</field>
        <field name = "thread_count" type = "number" size = "8" >Threads count</field>
        <field name = "address" type = "chunk" >Address</field>
    </reply>
    
    <method name = "set log hash rate" return = "status">
    		Set log hash rate
    		<field name = "visible" type = "number" size = "1" />
        <accept reply = "SET LOG HASH RATE OK" />
        <accept reply = "FAILURE" />
    </method>
    
    <reply name = "SET LOG HASH RATE OK">
        <field name = "status" type = "number" size = "4" >Status</field>
    </reply>
    
    <method name = "set log level" return = "status">
    		Set log hash rate
    		<field name = "level" type = "number" size = "1" />
        <accept reply = "SET LOG LEVEL OK" />
        <accept reply = "FAILURE" />
    </method>
    
    <reply name = "SET LOG LEVEL OK">
        <field name = "status" type = "number" size = "4" >Status</field>
    </reply>
    
    <method name = "start save graph" return = "status">
    		Start save graph
        <accept reply = "START SAVE GRAPH OK" />
        <accept reply = "FAILURE" />
    </method>
    
    <reply name = "START SAVE GRAPH OK">
        <field name = "status" type = "number" size = "4" >Status</field>
    </reply>
    
    <method name = "stop save graph" return = "status">
    		Stop save graph
        <accept reply = "STOP SAVE GRAPH OK" />
        <accept reply = "FAILURE" />
    </method>
    
    <reply name = "STOP SAVE GRAPH OK">
        <field name = "status" type = "number" size = "4" >Status</field>
    </reply>
    
    <method name = "get block hash" return = "status">
    		Get block hash
    		<field name = "height" type = "number" size = "8" >Height</field>
        <accept reply = "GET BLOCK HASH OK" />
        <accept reply = "FAILURE" />
    </method>
    
    <reply name = "GET BLOCK HASH OK">
        <field name = "status" type = "number" size = "4" >Status</field>
        <field name = "hash" type = "chunk" >Hash</field>
    </reply>
    
    <method name = "get block template" return = "status">
    		Get block template
    		<field name = "reserve_size" type = "number" size = "8" >Reserve size</field>
    		<field name = "address" type = "chunk" >Address</field>
        <accept reply = "GET BLOCK TEMPLATE OK" />
        <accept reply = "FAILURE" />
    </method>
    
    <reply name = "GET BLOCK TEMPLATE OK">
        <field name = "status" type = "number" size = "4" >Status</field>
        <field name = "reserved_offset" type = "number" size = "8" >Rservered Offset</field>
        <field name = "height" type = "number" size = "8" >Height</field>
        <field name = "difficulty" type = "number" size = "8" >Difficulty</field>
        <field name = "prev_hash" type = "chunk" >Previous Hash</field>
        <field name = "block_template_blob" type = "chunk" >Block template blob</field>
    </reply>

    <method name = "get hard fork info" return = "status">
        Ask for hard fork info.
        <field name = "hfversion" type = "number" size = "1" >Version</field>
        <accept reply = "GET HARD FORK INFO OK" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "GET HARD FORK INFO OK">
        <field name = "status" type = "number" size = "4" >Status</field>
        <field name = "hfversion" type = "number" size = "1" >Version</field>
        <field name = "enabled" type = "number" size = "1" >Enabled</field>
        <field name = "window" type = "number" size = "4" >Window</field>
        <field name = "votes" type = "number" size = "4" >Votes</field>
        <field name = "threshold" type = "number" size = "4" >Threshold</field>
        <field name = "voting" type = "number" size = "1" >Voting</field>
        <field name = "hfstate" type = "number" size = "4" >State</field>
    </reply>

    <method name = "get connections list" return = "status">
    	Get connections
        <accept reply = "GET CONNECTIONS LIST OK" />
        <accept reply = "FAILURE" />
    </method>
    
    <reply name = "GET CONNECTIONS LIST OK">
        <field name = "status" type = "number" size = "4" />
        <field name = "connections" type = "frame" >Connections</field>
    </reply>
    
    <method name = "stop daemon" return = "status">
        <field name = "fast" type = "number" size = "1" >Fast exit</field>
        Stop daemon
        <accept reply = "STOP DAEMON OK" />
        <accept reply = "FAILURE" />
    </method>
    
    <reply name = "STOP DAEMON OK">
        <field name = "status" type = "number" size = "4" />
    </reply>
    
    <method name = "get block by height" return = "status">
        Get block by height
        <field name = "height" type = "number" size = "8" >Height</field>
        <field name = "header-only" type = "number" size = "1" >Header-only</field>
        <field name = "as-json" type = "number" size = "1" >As JSON</field>
        <accept reply = "GET BLOCK BY HEIGHT OK" />
        <accept reply = "FAILURE" />
    </method>
    
    <reply name = "GET BLOCK BY HEIGHT OK">
        <field name = "status" type = "number" size = "4" />
        <field name = "block" type = "chunk" />
        <field name = "major_version" type = "number" size="1" />
        <field name = "minor_version" type = "number" size="1" />
        <field name = "timestamp" type = "number" size="8" />
        <field name = "prev_hash" type = "chunk" />
        <field name = "nonce" type = "number" size="4" />
        <field name = "orphan" type = "number" size="1" />
        <field name = "height" type = "number" size="8" />
        <field name = "depth" type = "number" size="8" />
        <field name = "hash" type = "chunk" />
        <field name = "difficulty" type = "number" size="8" />
        <field name = "reward" type = "number" size="8" />
    </reply>
    
    <method name = "get block by hash" return = "status">
        Get block by hash
        <field name = "hash" type = "chunk" >Hash</field>
        <field name = "header-only" type = "number" size = "1" >Header-only</field>
        <field name = "as-json" type = "number" size = "1" >As JSON</field>
        <accept reply = "GET BLOCK BY HASH OK" />
        <accept reply = "FAILURE" />
    </method>
    
    <reply name = "GET BLOCK BY HASH OK">
        <field name = "status" type = "number" size = "4" />
        <field name = "block" type = "chunk" />
        <field name = "major_version" type = "number" size="1" />
        <field name = "minor_version" type = "number" size="1" />
        <field name = "timestamp" type = "number" size="8" />
        <field name = "prev_hash" type = "chunk" />
        <field name = "nonce" type = "number" size="4" />
        <field name = "orphan" type = "number" size="1" />
        <field name = "height" type = "number" size="8" />
        <field name = "depth" type = "number" size="8" />
        <field name = "hash" type = "chunk" />
        <field name = "difficulty" type = "number" size="8" />
        <field name = "reward" type = "number" size="8" />
    </reply>
    
    <method name = "get key image status" return = "status">
        Request key image status from the daemon.
        <field name = "key images" type = "frame" />
        <accept reply = "GET KEY IMAGE STATUS OK" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "GET KEY IMAGE STATUS OK">
        <field name = "status" type = "number" size = "4" />
        <field name = "spent" type = "frame" />
    </reply>
    
    <method name = "get tx pool" return = "status">
        Request tx pool from the daemon.
        <accept reply = "GET TX POOL OK" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "GET TX POOL OK">
        <field name = "status" type = "number" size = "4" />
        <field name = "msg data" type = "msg" />
    </reply>
    
    <method name = "set out peers" return = "status">
        <field name = "num out peers" type = "number" size = "8" >Max number of out peers</field>
        Set the max number of out peers
        <accept reply = "SET OUT PEERS OK" />
        <accept reply = "FAILURE" />
    </method>
    
    <reply name = "SET OUT PEERS OK">
        <field name = "status" type = "number" size = "4" />
    </reply>
    
</class>

